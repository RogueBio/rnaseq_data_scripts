#!/bin/bash

## Step 1: QC with FastQC

# Directory containing the raw data
ls "$raw_data_dir"

# Set Internal Field Separator (IFS) to newline to handle filenames with spaces
IFS=$'\n'

# Find all .fastq files in the raw_data directory and its subdirectories
fastq_files=($(find "$raw_data_dir" -type f \( -iname "*.fastq" -o -iname "*.fastq.gz" -o -iname "*.fq" -o -iname "*.fq.gz" \)))

# Write them to a file
printf "%s\n" "${fastq_files[@]}" > fastq_files

# Output the number of files found
echo "Found ${#fastq_files[@]} FASTQ files."

# Submit the SLURM job array
num_files=${#fastq_files[@]}
echo "Submitting job array for $num_files files..."
sbatch --array=0-$(($num_files - 1)) git_repos/rnaseq_data_scripts/fastqc_array.sh


## Step 2: Trimming with Trimmomatic

# Set raw data directory
export raw_data_dir="temperature_samples/220211_A00181_0425_BHVMJNDSX2/"
ls "$raw_data_dir"

# Use newline separator
IFS=$'\n'

# Find all .fastq files in the raw_data directory and its subdirectories
fastq_files=($(find "$raw_data_dir" -type f \( -iname "*.fastq" -o -iname "*.fastq.gz" -o -iname "*.fq" -o -iname "*.fq.gz" \)))

# Output the number of files found
echo "Found ${#fastq_files[@]} FASTQ files."

# Find all paired .fastq files in the raw_data directory and its subdirectories

# Check for both R1 and R2 FASTQ files with updated pattern
R1_files=($(find "$raw_data_dir" -type f -name '*R1*.fastq.gz'))
R2_files=($(find "$raw_data_dir" -type f -name '*R2*.fastq.gz'))
num_files=${#R1_files[@]}

# Debugging: print R1 and R2 filenames found
echo "Number of R1 files: ${#R1_files[@]}"
echo "Number of R2 files: ${#R2_files[@]}"

# Submit the SLURM job array for paired files
num_files=${#R1_files[@]}
echo "Submitting job array for $num_files paired files..."
sbatch --array=0-$(($num_files - 1)) git_repos/rnaseq_data_scripts/trimmomatic_array.sh

## Step 3: QC with FastQC

# Directory containing the raw data
export raw_data_dir="/home/ar9416e/mosquito_test/trimmed_reads"
ls "$raw_data_dir"

# Set Internal Field Separator (IFS) to newline to handle filenames with spaces
IFS=$'\n'

# Find all .fastq files in the raw_data directory and its subdirectories
fastq_files=($(find "$raw_data_dir" -type f \( -iname "*.fastq" -o -iname "*.fastq.gz" -o -iname "*.fq" -o -iname "*.fq.gz" \)))

# Write them to a file
printf "%s\n" "${fastq_files[@]}" > fastq_files

# Output the number of files found
echo "Found ${#fastq_files[@]} FASTQ files."

# Submit the SLURM job array
num_files=${#fastq_files[@]}
echo "Submitting job array for $num_files files..."
sbatch --array=0-$(($num_files - 1)) git_repos/rnaseq_data_scripts/fastqc_array.sh

## Step 4: Salmon Alignment

## 4.1. Generating a decoy-aware transcriptome

# Directory containing the reference genome 
ref_genome_dir="/home/ar9416e/git_repos/Reference_genome"

# Directory containing the reference transcripts data
transcripts_dir="/home/ar9416e/git_repos/Reference_genome"

# Extract chromosome information from the genome file to make the decoys.txt file
grep "^>" "$ref_genome_dir/VectorBase-68_AgambiaePEST_Genome.fasta" | cut -d " " -f 1 > decoys.txt

# Check
head decoys.txt

# Remove the > symbol from the file
sed -i.bak -e 's/>//g' decoys.txt

# Check
head decoys.txt

# Combine the transcripts and genome file, in this order!
cat "$transcripts_dir/VectorBase-68_AgambiaePEST_AnnotatedTranscripts.fasta" "$ref_genome_dir/VectorBase-68_AgambiaePEST_Genome.fasta" > trans_and_gen.fa.gz

# Load required modules
module load Salmon/1.10.1-GCC-12.3.0
module load gzip

# Set desired output directory
index_dir="/home/ar9416e/mosquito_test/alignments/salmon_index"

# Create it if it doesn't exist
mkdir -p "$index_dir"

# Run salmon index with decoy-aware transcriptome
salmon index -t trans_and_gen.fa.gz -d decoys.txt -p 30 -i "$index_dir"

#Step 5: Run alignment with Salmon

#Set path to salmon index

salmon_index = "/home/ar9416e/mosquito_test/alignments/salmon_index" 

#Trimmed fastq file folder

TRIM_DATA_DIR="/home/ar9416e/mosquito_test/trimmed_reads"

# Initialize variables for R1 and R2 files
R1=""
R2=""

# Loop through the files in the directory
for file in ${TRIM_DATA_DIR}/*; do
  # Check if the file contains 'R1' in its name and add it to the R1 variable
  if [[ $file == *R1* && $file != *R2* ]]; then
    R1="$R1 $file"
  # Check if the file contains 'R2' in its name and add it to the R2 variable
  elif [[ $file == *R2*]]; then
    R2="$R2 $file"
  fi
done

# Extract base filename from R2 file
base_filename=$(basename "$R2")

# Extract sample name from base filename (up to _S, adjust if needed)
sample_name="${base_filename%%_S*}"

output_dir="/home/ar9416e/mosquito_test/alignments"
#Run salmon alignment 

echo "Submitting job for sample ${base_filename}"
    
    # Submit sbatch job for Salmon alignment
    sbatch --export=ALL,salmon_index="${salmon_index}",R1="${R1}",R2="${R2}",sample_name="${base_filename}",output_dir="${output_dir}" \
        salmon_alignment.sh
done






